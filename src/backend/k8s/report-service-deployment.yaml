apiVersion: apps/v1
kind: Deployment
metadata:
  name: report-service
  namespace: startup-metrics
  labels:
    app: report-service
    tier: backend
    environment: production
    component: report-generation
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3003"
    prometheus.io/path: "/metrics"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: report-service
      tier: backend
  template:
    metadata:
      labels:
        app: report-service
        tier: backend
      annotations:
        checksum/config: ${CONFIG_CHECKSUM}
        checksum/secrets: ${SECRETS_CHECKSUM}
    spec:
      serviceAccountName: report-service
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - report-service
              topologyKey: kubernetes.io/hostname
      containers:
      - name: report-service
        image: startup-metrics/report-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3003
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 30
        envFrom:
        - configMapRef:
            name: startup-metrics-config
        - secretRef:
            name: startup-metrics-secrets
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: report-cache
          mountPath: /app/cache
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: report-cache
        emptyDir: {}
      securityContext:
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 60
      nodeSelector:
        type: application
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "report-service"
        effect: "NoSchedule"