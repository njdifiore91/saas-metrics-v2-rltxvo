apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: startup-metrics
  labels:
    app: postgres
    tier: database
    environment: production
spec:
  replicas: 1
  serviceName: postgres-service
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
      containers:
      - name: postgres
        image: postgres:14-alpine  # v14 LTS for enterprise stability
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            cpu: "2"    # 2 vCPU baseline
            memory: "8Gi"  # 8GB RAM baseline
          limits:
            cpu: "4"    # 4 vCPU max (db.r5.xlarge equivalent)
            memory: "16Gi"  # 16GB RAM max
        envFrom:
        - secretRef:
            name: startup-metrics-secrets
        - configMapRef:
            name: startup-metrics-config
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        - name: postgres-config
          mountPath: /etc/postgresql/conf.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-config
        configMap:
          name: startup-metrics-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp2
      resources:
        requests:
          storage: 100Gi  # 100GB storage for high-performance requirements

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: startup-metrics
  labels:
    app: postgres
    tier: database
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/certificate-id"  # Replace with actual SSL cert ARN
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
  type: ClusterIP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3-hour session stickiness

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
  namespace: startup-metrics
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: postgres

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: postgres-hpa
  namespace: startup-metrics
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: postgres
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
    scaleDown:
      stabilizationWindowSeconds: 600